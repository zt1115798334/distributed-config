spring:
  shardingsphere:
    datasource:
      # 所有数据源的名字
      names: ds-student-0, ds-student-1
      # 订单 orders 数据源配置 00
      ds-student-0:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/student_db_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
        username: root
        password: root
      # 订单 orders 数据源配置 01
      ds-student-1:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/student_db_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
        username: root
        password: root
    # 分片规则
    sharding:
      binding-tables: t_book
      default-database-strategy:
        inline:
          algorithm-expression: ds-student-$->{user_id % 2}
          sharding-column: user_id
      tables:
        # book 表配置
        t_book:
          #          actualDataNodes: ds-orders-$->{0..1}.orders_$->{0..4} # 映射到 ds-orders 数据源的 orders 表
          #          actualDataNodes: ds-orders-0.orders_0, ds-orders-0.orders_2, ds-orders-0.orders_4, ds-orders-0.orders_6, ds-orders-1.orders_1, ds-orders-1.orders_3, ds-orders-1.orders_5, ds-orders-1.orders_7
          actual-data-nodes: ds-student-0.t_book_$->{[0,1,2]}, ds-student-1.t_book_$->{[0,1,2]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              algorithm-expression: ds-student-$->{user_id % 2}
              sharding-column: user_id
          table-strategy:
            inline:
              algorithm-expression: t_book_$->{user_id % 3}
              sharding-column: user_id
    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL